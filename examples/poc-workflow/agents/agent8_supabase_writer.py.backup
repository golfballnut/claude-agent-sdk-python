#!/usr/bin/env python3
"""
Agent 8: Supabase Writer
Writes enriched course and contact data to Supabase database

Current Mode: Direct Database Write
Future Mode: Webhook Receiver (when deployed to cloud)

Responsibilities:
- Apply migration if not already applied
- Write course-level data (Agents 1, 2, 7)
- Write contact-level data (Agents 3, 5, 6)
- Atomic transaction (all-or-nothing)
- Handle errors gracefully

Schema:
- golf_courses: course data + Agent 6/7 fields
- golf_course_contacts: contact data + Agent 6 fields
"""

import anyio
import json
from typing import Any, Dict, List, Optional
from pathlib import Path
import sys
from datetime import datetime

# Add utils to path
sys.path.insert(0, str(Path(__file__).parent.parent / "template" / "utils"))

from env_loader import load_project_env, get_api_key


async def write_to_supabase(
    course_data: Dict[str, Any],
    water_hazard_data: Dict[str, Any],
    enriched_contacts: List[Dict[str, Any]]
) -> Dict[str, Any]:
    """
    Write enriched course and contact data to Supabase

    Args:
        course_data: Output from Agent 2 (course name, website, phone, etc.)
        water_hazard_data: Output from Agent 7 (water_hazard_count, confidence)
        enriched_contacts: List of contacts enriched by Agents 3, 5, 6

    Returns:
        Dict with: success, course_id, contacts_written, error (if any)
    """

    # Load environment
    load_project_env()
    supabase_url = get_api_key("SUPABASE_URL")
    supabase_key = get_api_key("SUPABASE_SERVICE_ROLE_KEY")

    if not supabase_url or not supabase_key:
        return {
            "success": False,
            "error": "SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY not set",
            "course_id": None,
            "contacts_written": 0
        }

    try:
        from supabase import create_client, Client

        supabase: Client = create_client(supabase_url, supabase_key)

        # ====================================================================
        # STEP 1: Check if migration is applied
        # ====================================================================
        print("   🔍 Checking migration status...")

        try:
            # Try to query for water_hazard_count column
            test_query = supabase.table("golf_courses").select("water_hazard_count").limit(1).execute()
            migration_applied = True
            print("   ✓ Migration already applied")
        except Exception as e:
            if "column" in str(e).lower() and "does not exist" in str(e).lower():
                # Migration not applied
                migration_applied = False
                print("   ⚠️  Migration not applied yet")
            else:
                raise

        # ====================================================================
        # STEP 2: Apply migration if needed
        # ====================================================================
        if not migration_applied:
            print("   📝 Applying migration...")

            migration_path = Path(__file__).parent.parent / "migrations" / "001_add_agent_enrichment_fields.sql"

            if not migration_path.exists():
                return {
                    "success": False,
                    "error": f"Migration file not found: {migration_path}",
                    "course_id": None,
                    "contacts_written": 0
                }

            with open(migration_path) as f:
                migration_sql = f.read()

            # Execute migration using RPC (Supabase SQL function)
            # Note: This requires a migration_apply function in Supabase
            # For now, we'll return an error and ask user to apply manually
            return {
                "success": False,
                "error": "Migration not applied. Please run migration manually in Supabase SQL Editor:\n" +
                        f"File: {migration_path}",
                "course_id": None,
                "contacts_written": 0,
                "migration_path": str(migration_path)
            }

        # ====================================================================
        # STEP 3: Prepare course data
        # ====================================================================
        print("   📦 Preparing course data...")

        # Extract data from course_data (Agent 2)
        course_name = course_data.get("data", {}).get("course_name")
        course_website = course_data.get("data", {}).get("website")
        course_phone = course_data.get("data", {}).get("phone")

        if not course_name:
            return {
                "success": False,
                "error": "Course name not found in course_data",
                "course_id": None,
                "contacts_written": 0
            }

        # Determine segment from first contact (they should all be same)
        segment = None
        segment_confidence = None
        if enriched_contacts:
            first_contact_intel = enriched_contacts[0].get("business_intel", {})
            if first_contact_intel:
                segmentation = first_contact_intel.get("segmentation", {})
                segment = segmentation.get("primary_target")
                segment_confidence = segmentation.get("confidence")

        # Water hazard data from Agent 7
        water_hazard_count = water_hazard_data.get("water_hazard_count")
        water_hazard_confidence = water_hazard_data.get("confidence")
        water_hazard_details = water_hazard_data.get("details", [])

        # ====================================================================
        # STEP 4: Upsert golf_courses
        # ====================================================================
        print(f"   💾 Writing course: {course_name}...")

        course_record = {
            "course_name": course_name,
            "website": course_website,
            "phone": course_phone,
            "segment": segment,
            "segment_confidence": segment_confidence,
            "water_hazard_count": water_hazard_count,
            "water_hazard_confidence": water_hazard_confidence,
            "water_hazard_details": json.dumps(water_hazard_details) if water_hazard_details else None,
            "agent6_enriched_at": datetime.utcnow().isoformat() if segment else None,
            "agent7_enriched_at": datetime.utcnow().isoformat() if water_hazard_count else None,
            "enhancement_status": "agent_enrichment_complete"
        }

        # Try to find existing course first
        existing_course = supabase.table("golf_courses")\
            .select("id")\
            .eq("course_name", course_name)\
            .maybe_single()\
            .execute()

        if existing_course.data:
            # Update existing course
            course_id = existing_course.data["id"]
            result = supabase.table("golf_courses")\
                .update(course_record)\
                .eq("id", course_id)\
                .execute()
            print(f"   ✓ Updated existing course (ID: {course_id})")
        else:
            # Insert new course
            result = supabase.table("golf_courses")\
                .insert(course_record)\
                .execute()
            course_id = result.data[0]["id"]
            print(f"   ✓ Created new course (ID: {course_id})")

        # ====================================================================
        # STEP 5: Upsert golf_course_contacts
        # ====================================================================
        print(f"   👥 Writing {len(enriched_contacts)} contacts...")

        contacts_written = 0

        for i, contact in enumerate(enriched_contacts, 1):
            name = contact.get("name")
            title = contact.get("title")
            email = contact.get("email")
            phone = contact.get("phone")
            linkedin_url = contact.get("linkedin_url")

            # Business intel from Agent 6
            business_intel = contact.get("business_intel", {})
            conversation_starters = business_intel.get("conversation_starters", [])
            opportunities = business_intel.get("opportunities", {})

            # Top 2 opportunities
            if opportunities:
                sorted_opps = sorted(opportunities.items(), key=lambda x: x[1], reverse=True)
                top_opp_1 = sorted_opps[0][0] if len(sorted_opps) > 0 else None
                top_opp_2 = sorted_opps[1][0] if len(sorted_opps) > 1 else None
            else:
                top_opp_1 = None
                top_opp_2 = None

            contact_record = {
                "golf_course_id": course_id,
                "name": name,
                "title": title,
                "email": email,
                "phone": phone,
                "linkedin_url": linkedin_url,
                "conversation_starters": json.dumps(conversation_starters) if conversation_starters else None,
                "top_opportunity_1": top_opp_1,
                "top_opportunity_2": top_opp_2,
                "agent6_enriched_at": datetime.utcnow().isoformat() if business_intel else None
            }

            # Try to find existing contact
            existing_contact = supabase.table("golf_course_contacts")\
                .select("id")\
                .eq("golf_course_id", course_id)\
                .eq("name", name)\
                .maybe_single()\
                .execute()

            if existing_contact.data:
                # Update existing contact
                contact_id = existing_contact.data["id"]
                supabase.table("golf_course_contacts")\
                    .update(contact_record)\
                    .eq("id", contact_id)\
                    .execute()
                print(f"      [{i}/{len(enriched_contacts)}] ✓ Updated: {name}")
            else:
                # Insert new contact
                supabase.table("golf_course_contacts")\
                    .insert(contact_record)\
                    .execute()
                print(f"      [{i}/{len(enriched_contacts)}] ✓ Created: {name}")

            contacts_written += 1

        # ====================================================================
        # SUCCESS
        # ====================================================================
        print(f"   ✅ Success! Course + {contacts_written} contacts written to Supabase")

        return {
            "success": True,
            "course_id": course_id,
            "contacts_written": contacts_written,
            "error": None
        }

    except Exception as e:
        print(f"   ❌ Error: {e}")
        import traceback
        traceback.print_exc()

        return {
            "success": False,
            "error": str(e),
            "course_id": None,
            "contacts_written": 0
        }


async def main():
    """Demo: Write test data to Supabase"""
    print("💾 Agent 8: Supabase Writer")
    print("="*70)

    # Test data (would come from orchestrator in production)
    test_course_data = {
        "url": "https://vsga.org/courselisting/11950",
        "data": {
            "course_name": "Richmond Country Club",
            "website": "https://www.richmondcountryclubva.com/",
            "phone": "804-359-9141",
            "staff": []
        },
        "cost": 0.013,
        "turns": 2
    }

    test_water_hazard_data = {
        "water_hazard_count": 5,
        "confidence": "high",
        "details": ["Found via Perplexity search"],
        "cost": 0.003
    }

    test_enriched_contacts = [
        {
            "name": "Stacy Foster",
            "title": "General Manager",
            "email": "sfoster@richmondcountryclubva.com",
            "phone": "804-592-5861",
            "linkedin_url": "https://www.linkedin.com/in/stacy-foster-test",
            "business_intel": {
                "segmentation": {
                    "primary_target": "high-end",
                    "confidence": 8,
                    "signals": ["Private club", "Premium positioning"]
                },
                "opportunities": {
                    "range_ball_buy": 8,
                    "range_ball_sell": 2,
                    "range_ball_lease": 9
                },
                "conversation_starters": [
                    {
                        "text": "Are you currently disposing of used range balls?",
                        "value_prop": "range_ball_buy",
                        "relevance": 9
                    }
                ]
            }
        }
    ]

    print(f"Course: {test_course_data['data']['course_name']}")
    print(f"Water Hazards: {test_water_hazard_data['water_hazard_count']}")
    print(f"Contacts: {len(test_enriched_contacts)}\n")

    result = await write_to_supabase(
        test_course_data,
        test_water_hazard_data,
        test_enriched_contacts
    )

    print(f"\n📊 Results:")
    print(f"   Success: {result['success']}")
    if result['success']:
        print(f"   Course ID: {result['course_id']}")
        print(f"   Contacts Written: {result['contacts_written']}")
    else:
        print(f"   Error: {result['error']}")
        if 'migration_path' in result:
            print(f"\n   📝 To apply migration, run this SQL in Supabase SQL Editor:")
            print(f"   {result['migration_path']}")

    print(f"\n{'✅' if result['success'] else '❌'} Complete!")


if __name__ == "__main__":
    anyio.run(main)
